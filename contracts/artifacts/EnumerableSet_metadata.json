{
	"compiler": {
		"version": "0.8.13+commit.abaa5c0e"
	},
	"language": "Solidity",
	"output": {
		"abi": [],
		"devdoc": {
			"details": "Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====",
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Main_flattened.sol": "EnumerableSet"
		},
		"evmVersion": "petersburg",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 50
		},
		"remappings": []
	},
	"sources": {
		"Main_flattened.sol": {
			"keccak256": "0x37ea3a40248c12af6fb21da0034c7c3d5fc48bbd6668580aa7b5a2120e00f174",
			"license": "MIT",
			"urls": [
				"bzz-raw://0bdf076c5e7dcb41df53bdb7b30b9c02eca9dfb43b17e7d5b10ecf20ee680b2f",
				"dweb:/ipfs/QmWKZtpJWEUggedEEiVWuyrbiy8FimWyuTp36Emk1nSqj4"
			]
		}
	},
	"version": 1
}